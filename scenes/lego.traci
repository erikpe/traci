(define epsilon 0.001)
(define lego-rounding .01)
(define pi 3.1415926535898)
      
(define (round-box x y z r . args)
  (let ((r2 (* 2 r))
        (v0 (vec r r r))
        (v1 (vec (- x r) r r))
        (v2 (vec (- x r) r (- z r)))
        (v3 (vec r r (- z r)))
        (v4 (vec r (- y r) r))
        (v5 (vec (- x r) (- y r) r))
        (v6 (vec (- x r) (- y r) (- z r)))
        (v7 (vec r (- y r) (- z r))))
    (union
      (box (scale x (- y r2) (- z r2))
           (translate 0 r r))
      (box (scale (- x r2) y (- z r2))
           (translate r 0 r))
      (box (scale (- x r2) (- y r2) z)
           (translate r r 0))
      (union
        (sphere (scale r r r) (translate v0))
        (sphere (scale r r r) (translate v1))
        (sphere (scale r r r) (translate v2))
        (sphere (scale r r r) (translate v3))
        (cylinder r v0 v1)
        (cylinder r v1 v2)
        (cylinder r v2 v3)
        (cylinder r v3 v0)
        (bbox (scale x r2 z)))
      (union
        (sphere (scale r r r) (translate v4))
        (sphere (scale r r r) (translate v5))
        (sphere (scale r r r) (translate v6))
        (sphere (scale r r r) (translate v7))
        (cylinder r v4 v5)
        (cylinder r v5 v6)
        (cylinder r v6 v7)
        (cylinder r v7 v4)
        (bbox (scale x r2 z) (translate 0 (- y r2) 0)))
      (cylinder r v0 v4)
      (cylinder r v1 v5)
      (cylinder r v2 v6)
      (cylinder r v3 v7)
      (bbox (scale x y z))
      (apply insert args))))

(define (lego-peg . args)
  (let ((height .1)
        (radius .15)
        (rounding lego-rounding))
    (union
      (cylinder (scale radius (- height rounding) radius))
      (cylinder (scale (- radius rounding) .1 (- .15 rounding)))
      (torus rounding (- radius rounding)
        (rotx (/ pi 2))
        (translate 0 (- height rounding) 0))
      (difference
        (cylinder (scale (+ radius rounding) rounding (+ radius rounding)))
        (torus rounding (+ radius rounding)
          (rotx (/ pi 2))
          (translate 0 rounding 0)))
      (bbox
        (translate -.5 0 -.5)
        (scale (* 2 (+ radius rounding)) height (* 2 (+ radius rounding))))
      (translate .25 .6 .25)
      (apply insert args))))

(define (lego-hole . args)
  (let ((radius .15)
        (length .5)
        (rounding lego-rounding))
    (union
      (cylinder radius
        (vec 0 0 (+ length epsilon))
        (vec 0 0 (- epsilon)))
      (cylinder (+ radius rounding)
        (vec 0 0 (+ length epsilon))
        (vec 0 0 (- length rounding)))
      (cylinder (+ radius rounding)
        (vec 0 0 (- epsilon))
        (vec 0 0 rounding))
      (bbox
        (translate -.5 -.5 0)
        (scale (* 2 (+ radius rounding)) (* 2 (+ radius rounding)) length))
      (translate .5 .3 0)
      (apply insert args))))

(define (lego pegs . args)
  (union
    (difference
      (round-box (/ pegs 2.0) .6 .5 lego-rounding)
      (loop i 0 (- pegs 2)
        (lego-hole (translate (* i .5) 0 0))))
    (loop i 0 (- pegs 1)
      (lego-peg (translate (* i .5) 0 0)))
    (bbox (scale (/ pegs 2.0) .7 .5))
    (apply insert args)))
