(define (rounded-cylinder-0 radius height rounding . args)
  (union
   (cylinder radius
             (vec 0 0 0)
             (vec 0 (- height rounding) 0))
   (cylinder (- radius rounding)
             (vec 0 (- height rounding epsilon) 0)
             (vec 0 height 0))
   (torus rounding (- radius rounding)
          (rotx pi/2)
          (translate 0 (- height rounding) 0))
   (bbox
    (scale 2 1 2)
    (translate -1 0 -1)
    (scale radius height radius))
   (apply insert args)))

(define (rounded-cylinder-1 radius height rounding . args)
  (union
   (cylinder radius
             (vec 0 rounding 0)
             (vec 0 (- height rounding) 0))
   (cylinder (- radius rounding)
             (vec 0 0 0)
             (vec 0 height 0))
   (torus rounding (- radius rounding)
          (rotx pi/2)
          (translate 0 rounding 0))
   (torus rounding (- radius rounding)
          (rotx pi/2)
          (translate 0 (- height rounding) 0))
   (bbox
    (scale 2 1 2)
    (translate -1 0 -1)
    (scale radius height radius))
   (apply insert args)))

(define (rounded-cylinder-2 radius height lower-rounding upper-rounding . args)
  (union
   (cylinder radius
             (vec 0 (- lower-rounding epsilon) 0)
             (vec 0 (- height upper-rounding) 0))
   (cylinder (- radius upper-rounding)
             (vec 0 (- height upper-rounding epsilon) 0)
             (vec 0 height 0))
   (torus upper-rounding (- radius upper-rounding)
          (rotx pi/2)
          (translate 0 (- height upper-rounding) 0))
   (difference
    (cylinder (+ radius lower-rounding)
              (vec 0 (- epsilon) 0)
              (vec 0 lower-rounding 0))
    (torus lower-rounding (+ radius lower-rounding)
           (rotx pi/2)
           (translate 0 lower-rounding 0)))
   (bbox
    (scale 2 1 2)
    (translate -1 0 -1)
    (scale (+ radius lower-rounding)
           (+ height epsilon)
           (+ radius lower-rounding))
    (translate 0 (- epsilon) 0))
   (apply insert args)))

(define (rounded-cylinder-3 radius height rounding . args)
  (union
   (cylinder radius
             (vec 0 (- rounding epsilon) 0)
             (vec 0 (+ (- height rounding) epsilon) 0))
   (difference
    (cylinder (+ radius rounding)
              (vec 0 (- epsilon) 0)
              (vec 0 rounding 0))
    (torus rounding (+ radius rounding)
           (rotx pi/2)
           (translate 0 rounding 0)))
   (difference
    (cylinder (+ radius rounding)
              (vec 0 (- height rounding) 0)
              (vec 0 (+ height epsilon) 0))
    (torus rounding (+ radius rounding)
           (rotx pi/2)
           (translate 0 (- height rounding) 0)))
   (bbox
    (scale 2 1 2)
    (translate -1 0 -1)
    (scale (+ radius rounding)
           (+ height epsilon epsilon)
           (+ radius rounding))
    (translate 0 (- epsilon) 0))
   (apply insert args)))

(define (rounded-cylinder-4 radius height rounding . args)
  (union
   (cylinder radius
             (vec 0 (- rounding epsilon) 0)
             (vec 0 height 0))
   (difference
    (cylinder (+ radius rounding)
              (vec 0 (- epsilon) 0)
              (vec 0 rounding 0))
    (torus rounding (+ radius rounding)
           (rotx pi/2)
           (translate 0 rounding 0)))
   (bbox
    (scale 2 1 2)
    (translate -1 0 -1)
    (scale (+ radius rounding)
           (+ height epsilon)
           (+ radius rounding))
    (translate 0 (- epsilon) 0))
   (apply insert args)))
   

(define (rounded-box x y z r . args)
  (let ((r2 (* 2 r))
        (v0 (vec r r r))
        (v1 (vec (- x r) r r))
        (v2 (vec (- x r) r (- z r)))
        (v3 (vec r r (- z r)))
        (v4 (vec r (- y r) r))
        (v5 (vec (- x r) (- y r) r))
        (v6 (vec (- x r) (- y r) (- z r)))
        (v7 (vec r (- y r) (- z r))))
    (union
     (box (scale x (- y r2) (- z r2))
          (translate 0 r r))
     (box (scale (- x r2) y (- z r2))
          (translate r 0 r))
     (box (scale (- x r2) (- y r2) z)
          (translate r r 0))
     (union
      (sphere (scale r r r) (translate v0))
      (sphere (scale r r r) (translate v1))
      (sphere (scale r r r) (translate v2))
      (sphere (scale r r r) (translate v3))
      (cylinder r v0 v1)
      (cylinder r v1 v2)
      (cylinder r v2 v3)
      (cylinder r v3 v0)
      (bbox (scale x r2 z)))
     (union
      (sphere (scale r r r) (translate v4))
      (sphere (scale r r r) (translate v5))
      (sphere (scale r r r) (translate v6))
      (sphere (scale r r r) (translate v7))
      (cylinder r v4 v5)
      (cylinder r v5 v6)
      (cylinder r v6 v7)
      (cylinder r v7 v4)
      (bbox (scale x r2 z) (translate 0 (- y r2) 0)))
     (cylinder r v0 v4)
     (cylinder r v1 v5)
     (cylinder r v2 v6)
     (cylinder r v3 v7)
     (bbox (scale x y z))
     (apply insert args))))

(define (rounded-box2 x y z r . args)
  (let ((r2 (* 2 r))
        (v0 (vec r 0 r))
        (v1 (vec (- x r) 0 r))
        (v2 (vec (- x r) 0 (- z r)))
        (v3 (vec r 0 (- z r)))
        (v4 (vec r (- y r) r))
        (v5 (vec (- x r) (- y r) r))
        (v6 (vec (- x r) (- y r) (- z r)))
        (v7 (vec r (- y r) (- z r))))
    (union
     (box (scale x (- y r) (- z r2))
          (translate 0 0 r))
     (box (scale (- x r2) (- y r) z)
          (translate r 0 0))
     (union
      (box (scale (- x r2) (+ r epsilon) (- z r2))
           (translate r (- y r epsilon) r))
      (sphere (scale r r r) (translate v4))
      (sphere (scale r r r) (translate v5))
      (sphere (scale r r r) (translate v6))
      (sphere (scale r r r) (translate v7))
      (cylinder r v4 v5)
      (cylinder r v5 v6)
      (cylinder r v6 v7)
      (cylinder r v7 v4)
      (bbox (scale x r2 z) (translate 0 (- y r2) 0)))
     (cylinder r v0 v4)
     (cylinder r v1 v5)
     (cylinder r v2 v6)
     (cylinder r v3 v7)
     (difference
      (box (scale (+ x r2) (+ r epsilon) (+ z r2))
           (translate (- r) (- epsilon) (- r)))
      (cylinder r
                (vec (- 0.0 r epsilon) r (+ z r))
                (vec (+ x r epsilon) r (+ z r)))))))
     
           