#ifndef LEGO_TECHNIC_LIFTARM_TRACI_
#define LEGO_TECHNIC_LIFTARM_TRACI_

#include "common/basic-units.traci"
#include "common/basic-shapes.traci"
#include "lego-units.traci"
#include "lego-primitives.traci"

/*
 * Technic, Liftarm 1 x 4 Thin with Stud Connector
 * http://www.bricklink.com/catalogItem.asp?P=2825
 */
def legoTechnicLiftarmWithStudConnector_1x4 ()
{
    return union {
        roundedBox_base (.5, 3, .15, LEGO_ROUNDING) {
            rotz -PI/2;
            translate [0, .5, -.5];
        }
        roundedBox_base (.5, 3, .15, LEGO_ROUNDING) {
            rotz -PI/2;
            translate [0, .5, .35];
        }
        difference {
            union {
                box { scale [1, .18, 1]; translate [1, .16, -.5]; }
                roundedCylinder1 (X*2, [2, .5, 0], .44, LEGO_ROUNDING);
                roundedCylinder1 (X, [1, .5, 0], .44, LEGO_ROUNDING);
            }
            roundedCylinder2 ([1, .5, 0], [1, .44, 0], .36, LEGO_ROUNDING/2);
            roundedCylinder2 ([1, 0, 0], [1, .06, 0], .36, LEGO_ROUNDING/2);
            roundedCylinder3 ([1, .06, 0], [1, .44, 0], .3, LEGO_ROUNDING/2);
            roundedCylinder2 ([2, .5, 0], [2, .44, 0], .36, LEGO_ROUNDING/2);
            roundedCylinder2 ([2, 0, 0], [2, .06, 0], .36, LEGO_ROUNDING/2);
            roundedCylinder3 ([2, .06, 0], [2, .44, 0], .3, LEGO_ROUNDING/2);
        }
        difference {
            roundedCylinder1 (X*3, [3, .5, 0], .5, LEGO_ROUNDING);
            legoTechnicAxle_base2 (.5, AXLE_RADIUS + EPSILON, AXLE_THICKNESS + EPSILON, LEGO_ROUNDING) {
                translate X*3;
            }
        }
        difference {
            roundedCylinder1 (ORIGO, Y, .5, LEGO_ROUNDING);
            roundedCylinder2 (Y, Y*.5, .3, LEGO_ROUNDING);
            roundedCylinder2 (Y, Y*.5, .3, LEGO_ROUNDING/2) { translate [-.5, 0, -.5]; }
            roundedCylinder2 (Y, Y*.5, .3, LEGO_ROUNDING/2) { translate [-.5, 0, .5]; }
            roundedCylinder2 (Y, Y*.5, .3, LEGO_ROUNDING/2) { translate [.5, 0, -.5]; }
            roundedCylinder2 (Y, Y*.5, .3, LEGO_ROUNDING/2) { translate [.5, 0, .5]; }
            legoTechnicAxle_base2 (.5, AXLE_RADIUS + EPSILON, AXLE_THICKNESS + EPSILON, LEGO_ROUNDING);
        }
        bbox { scale [4, 1, 1]; translate [-.5, 0, -.5]; }
    }
}

/*
 * Short hand for: legoTechnicLiftarmWithStudConnector_1x4
 */
def legoTechnicLiftarm_1 ()
{
    return legoTechnicLiftarmWithStudConnector_1x4();
}

#endif LEGO_TECHNIC_LIFTARM_TRACI_
