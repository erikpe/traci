#ifndef LEGO_TECHNIC_PLATE_WITH_HOLES_TRACI_
#define LEGO_TECHNIC_PLATE_WITH_HOLES_TRACI_

#include "common/basic-units.traci"
#include "common/basic-shapes.traci"
#include "lego-units.traci"
#include "lego-primitives.traci"

/*
 * Technic, Plate
 * http://www.bricklink.com/catalogList.asp?catType=P&catString=140
 */
def legoTechnicPlateWithHoles (length)
{
    boxLength = length*LU;
    boxHeight = .4*LU;
    boxWidth = 2*LU;
    pegHeight = .2*LU;
    return union {
        difference {
            roundedBox1 (boxLength, boxHeight, boxWidth, LEGO_ROUNDING);
            for (x in 0 .. length-2) {
                legopartTechnicPlateHole () {
                    translate X*(x*LU);
                };
            }
        };
        for (x in 0 .. length-1) {
            legopartPeg () {
                translate [x*LU, boxHeight, 0];
            };
            legopartPeg() {
                translate [x*LU, boxHeight, LU];
            };
        }
        bbox {
            scale [boxLength, boxHeight+pegHeight, boxWidth];
        };
    };
}

/*
 * Technic, Plate 2 x 4 with 3 Holes
 * http://www.bricklink.com/catalogItem.asp?P=3709b
 */
def legoTechnicPlateWithHoles_2x4 ()
{
    return legoTechnicPlateWithHoles (4);
}

/*
 * Technic, Plate 2 x 6 with 5 Holes
 * http://www.bricklink.com/catalogItem.asp?P=32001
 */
def legoTechnicPlateWithHoles_2x6 ()
{
    return legoTechnicPlateWithHoles (6);
}

/*
 * Technic, Plate 2 x 8 with 7 Holes
 * http://www.bricklink.com/catalogItem.asp?P=3738
 */
def legoTechnicPlateWithHoles_2x8 ()
{
    return legoTechnicPlateWithHoles (8);
}

/*
 * Technic, Plate 1 x 5 with Toothed Ends, 2 Studs and Center Axle Hole
 * http://www.bricklink.com/catalogItem.asp?P=2711
 */
def legoTechnicPlateWithToothedEnds_1x5 ()
{
    def tooths (toothHeight, toothSpacing)
    {
        return union {
            for (i in 0 .. 15) {
                box {
                    scale [.2 + EPSILON, toothHeight + EPSILON, toothSpacing];
                    translate [-.5 - EPSILON, -EPSILON, 0];
                    roty i*(22.5/360)*PI*2;
                };
            }
            bbox {
                scale [1 + 2*EPSILON, toothHeight + EPSILON, 1 + 2*EPSILON];
                translate [-.5 - EPSILON, -EPSILON, -.5 - EPSILON];
            };
        };
    }
    toothHeight = .07;
    toothSpacing = .08;
    return union {
        legopartPegHole () { translate [1, .4, 0]; };
        legopartPegHole () { translate [3, .4, 0]; };
        difference {
            union {
                roundedCylinder1 ([.5, 0, .5], [.5, .4, .5], .5, LEGO_ROUNDING);
                roundedCylinder1 ([4.5, 0, .5], [4.5, .4, .5], .5, LEGO_ROUNDING);
                roundedBox_base (.4-toothHeight, 4, 1, LEGO_ROUNDING) {
                    rotz -PI/2;
                    translate [.5, .4, 0];
                };
                roundedBox0 (3, toothHeight + LEGO_ROUNDING, 1, LEGO_ROUNDING) {
                    rotx PI;
                    translate [1, toothHeight + LEGO_ROUNDING, 1];
                };
            };
            legoTechnicAxle_base2 (.4, AXLE_RADIUS + EPSILON, AXLE_THICKNESS + EPSILON, LEGO_ROUNDING) {
                translate [2.5, 0, .5];
            };
            roundedCylinder3 ([.5, 0, .5], [.5, .4, .5], .3, LEGO_ROUNDING);
            roundedCylinder3 ([4.5, 0, .5], [4.5, .4, .5], .3, LEGO_ROUNDING);
            tooths (toothHeight, toothSpacing) { translate [.5, 0, .5]; };
            tooths (toothHeight, toothSpacing) { translate [4.5, 0, .5]; };
        };
    };
}

#endif // LEGO_TECHNIC_PLATE_WITH_HOLES_TRACI_
