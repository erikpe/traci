#ifndef TECHNIC_PIN_TRACI
#define TECHNIC_PIN_TRACI

#include "primitives/lego-units.traci"
#include "primitives/basic-shapes.traci"
#include "primitives/lego-primitives.traci"

def legoTechnicPinWithoutFrictionRidgesLengthwise_helper (length)
{
    radius = LU*.3;
    outerStopperRadius = LU*.04;
    openingWidth = LU*.1;
    openingDepth = LU*.4;
    return difference {
        union {
            roundedCylinder4 (radius, length, LEGO_ROUNDING) {
                rotx PI/2;
            }
            torus (outerStopperRadius, radius) {
                translate Z*(length-outerStopperRadius);
            }
        }
        cylinder (.5*openingWidth, [-radius-EPSILON, 0, length-openingDepth], [radius+EPSILON, 0, length-openingDepth]);
        box {
            translate [-.5, -.5, 0];
            scale [2*(radius+outerStopperRadius+EPSILON), openingWidth, openingDepth+EPSILON];
            translate Z*(length-openingDepth);
        }
    }
}

/*
 * http://www.bricklink.com/catalogItem.asp?P=3673
 */
def legoTechnicPinWithoutFrictionRidgesLengthwise ()
{
    middleStopperRadius = .38*LU;
    middleStopperLength = .15*LU;
    innerRadius = .22*LU;
    return difference {
        union {
            legoTechnicPinWithoutFrictionRidgesLengthwise_helper (LU-.5*middleStopperLength) {
                translate Z*.5*middleStopperLength;
            }
            legoTechnicPinWithoutFrictionRidgesLengthwise_helper (LU-.5*middleStopperLength) {
                rotx PI;
                translate -Z*.5*middleStopperLength;
            }
            roundedCylinder1 (middleStopperRadius, middleStopperLength, LEGO_ROUNDING) {
                rotx PI/2;
                translate -Z*.5*middleStopperLength;
            }
        }
        roundedCylinder3 (innerRadius, 2*LU, LEGO_ROUNDING) {
            translate -Y*LU;
            rotx PI/2;
        }
        bbox {
            scale 2;
            translate [-1, -1, -1];
            scale [middleStopperRadius, middleStopperRadius, LU];
        }
        rotz rand()*2*PI;
        translate [LU, .7*LU, 0];
    }
}

/*
 * Short-hand for: legoTechnicPinWithoutFrictionRidgesLengthwise
 */
def legoTechnicPin_1 ()
{
    return legoTechnicPinWithoutFrictionRidgesLengthwise();
}

#endif // TECHNIC_PIN_TRACI
