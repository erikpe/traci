#include "bricks/all-bricks.traci"

def rotHole (obj, theta)
{
    return obj {
        translate [-1, .7, 0];
        rotz theta;
        translate [1, .7, 0];
    }
}

global BLACK = color [.15, .15, .15];
global BLACK_LIGHT = color [.2, .2, .2];
global GRAY = color [.85, .85, .85];
global YELLOW = color [1, 1, 0];

def pieces1 ()
{
    return union {
        technicBrick1x4WithHoles () { BLACK; }
        technicBrick1x6WithHoles () { BLACK; translate [2, 0, 1]; }
        technicBrick1x10WithHoles () { BLACK; translate [5, 0, 2]; }
        technicBrick1x4WithHoles () { BLACK; translate [12, 0, 1]; }
        legopiecePlate (1, 2) { YELLOW; translate [0, 1.2, 0]; }
        legopiecePlate (2, 2) { YELLOW; translate [2, 1.2, 0]; }
        legopiecePlate (1, 2) { YELLOW; translate [2, 1.6, 0]; }
        legopiecePlate (2, 1) { YELLOW; translate [3, 1.6, 0]; }
        legopieceTechnicPin () { BLACK_LIGHT; translate [2, 0, 1]; }
        legopieceTechnicPin () { BLACK_LIGHT; translate [5, 0, 2]; }
        legopieceTechnicPin () { GRAY; translate [6, 0, 2]; }
        legopieceTechnicPin () { BLACK_LIGHT; translate [8, 0, 2]; }
        legopieceTechnicPin () { BLACK_LIGHT; translate [10, 0, 2]; }
        legopieceTechnicPin () { GRAY; translate [12, 0, 2]; }
        legopieceTechnicPin () { BLACK_LIGHT; translate [13, 0, 2]; }
        bbox { scale [16, 2.2, 3]; }
    }
}

def pieces2 (theta)
{
    return union {
        technicBrick1x6WithHoles () { YELLOW; }
        legopiecePlate (1, 2) { YELLOW; translate [0, 1.2, 0]; }
        legopiecePlate (1, 2) { YELLOW; translate [0, 1.6, 0]; }
        legopiecePlate (1, 2) { YELLOW; translate [4, 1.2, 0]; }
        legopiecePlate (1, 2) { YELLOW; translate [4, 1.6, 0]; }
        technicBrick1x8WithHoles () { YELLOW; translate [0, 2, 0]; }
        legopieceTechnicPin () { BLACK_LIGHT; translate [4, 2, 1]; }
        legopieceTechnicPin () { BLACK_LIGHT; translate [6, 2, 1]; }
        bbox { scale [8, 3.4, 2]; }
        translate [-1, -.7, 0];
        rotz theta;
        translate [1, .7, 0];
    }
}

def pieces3 ()
{
    return union {
        technicBrick1x2WithHoles () { BLACK; }
        technicBrick1x2WithHoles () { BLACK; translate [0, 0, 3]; }
        technicBrick1x2WithHoles () { BLACK; roty PI/2; translate [0, 0, 3]; }
        technicBrick1x2WithHoles () { BLACK; roty PI/2; translate [1, 0, 3]; }
        legopieceTechnicPlateWithHoles (4) { BLACK; roty PI/2; translate [0, -.4, 4]; }
        legopieceTechnicPlateWithHoles (4) { BLACK; roty PI/2; translate [0, 1.2, 4]; }
        legopieceTechnicPin () { GRAY; }
        legopieceTechnicPin () { GRAY; translate [0, 0, 4]; }
        legopieceTechnicPin () { GRAY; roty PI/2; translate [0, 0, 3]; }
        legopieceTechnicPin () { GRAY; roty PI/2; translate [2, 0, 3]; }
        bbox { scale [4, 2.2, 6]; translate [-1, -.4, -1]; }
    }
}

def pieces4 ()
{
    return union {
        technicBrick1x4WithHoles () { YELLOW; roty PI/2; translate [0, .4, 2]; }
        technicBrick1x6WithHoles () { YELLOW; translate [0, 1.6, 1]; }
        technicBrick1x6WithHoles () { YELLOW; translate [0, 1.6, -2]; }
        legopieceTechnicPlateWithHoles (4) { YELLOW; roty PI/2; translate [0, 0, 2]; }
        bbox { translate [0, 0, -.5]; scale [6, 3, 4]; }
    }
}

def pieces5 ()
{
    return union {
        technicBrick1x2WithHoles () { YELLOW; }
        legopiecePlate (1, 2) { YELLOW; translate [0, 1.2, 0]; }
        legopiecePlate (1, 2) { YELLOW; translate [0, 1.6, 0]; }
        legopiecePlate (2, 1) { YELLOW; translate [0, 1.6, 0]; }
        technicBrick1x6WithHoles () { YELLOW; translate [-2, 2, 0]; }
        legopieceTechnicPin () { GRAY; translate [-2, 2, 0]; }
        legopieceTechnicPin () { BLACK_LIGHT; translate [2, 2, 0]; }
        bbox { scale [6, 3.4, 3]; translate [-2, 0, -1]; }
    }
}

def pieces6 ()
{
    return union {
        technicBrick1x6WithHoles () { YELLOW; translate [0, 0, 2]; }
        technicBrick1x6WithHoles () { YELLOW; translate [0, 0, -3]; }
    }
}

def airplane ()
{
    return union {
        pieces1 ()     { translate [0, 0, 1]; }
        pieces2 (PI/2) { translate [10, 0, 2]; }
        pieces1 ()     { scale [1, 1, -1]; translate [0, 0, -1]; }
        pieces2 (PI/2) { scale [1, 1, -1]; translate [10, 0, -2]; } 
        pieces4 ()     { translate [-1, 1.6, 0]; }
        pieces3 ()     { translate [10, 2, -2]; }
        pieces5 ()     { translate [8, 4, 3]; }
        pieces5 ()     { scale [1, 1, -1]; translate [8, 4, -3]; }
        pieces6 ()     { translate [-5, -.7, 0]; rotz .7509279107; translate [7, 6.7, 0]; }
    }
}

airplane();

//for (i in 0 .. 100) {
//    airplane() { translate X*.01*i; }
//}
